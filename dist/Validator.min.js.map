{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Validator.min.js","webpack:///webpack/bootstrap 8e32ffe9d306a7d1e104","webpack:///./src/index.js","webpack:///./src/Validator-dom.js","webpack:///./src/util.js","webpack:///./src/Validator.js","webpack:///./src/testHook.js","webpack:///./src/regex.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_ValidatorDom","_ValidatorDom2","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_util","_Validator","_Validator2","Validator","_ValidatorCore","getPrototypeOf","apply","arguments","isSuccess","errors","clazz","opts","prefix","placeId","name","replace","_removeErrorPlace","_addErrorPlace","level","validateFieldFunc","that","e","evt","getCurrentEvent","el","srcElement","field","fields","_getArrayByName","_validateField","ex","formEls","form","elements","formElsLength","oninput","onchange","noop","thatLevel","eventLevel","thisEl","window","ActiveXObject","onkeyup","errorObj","elLength","removeClass","addClass","errorEl","document","getElementById","parentNode","removeChild","createElement","setAttribute","innerText","message","errorPlacement","fieldEl","isRadioOrCheckbox","appendChild","getValue","extend","source","initField","type","checked","parseToDate","param","thatDate","Date","dateArray","split","setFullYear","setMonth","setDate","isBrowser","event","isSelect","elArray","tagName","isSameNameField","getElementsByName","attributeValue","attributeName","hasClass","cls","className","match","RegExp","classList","add","reg","remove","_typeof","Symbol","iterator","_testHook","_testHook2","Validate","options","_default","bodyData","handles","addFields","formName","forms","onInputEvent","_onSubmit","validateByName","preventSubmit","callback","isMultiSuccess","preventDefault","returnValue","method","rules","fieldNames","Array","namesLength","thatOnSubmit","onsubmit","validate","undefined","_this","thatField","_updateField","isRequired","indexOf","isEmpty","_loop","ruleLength","parts","exec","rule","seqText","messages","_loop2","_ret","afterFieldValidate","elObj","arr","push","_regex","_regex2","testHook","isNumeric","numeric","test","isInteger","integer","isDecimal","decimal","isEmail","email","isIp","ip","isTel","tel","isPhone","phone","isAbc","abc","isUrl","url","isDate","date","year","parseInt","month","day","numDays","required","greaterThan","parseFloat","lessThan","maxLength","minLength","greaterThanDate","currentDate","paramDate","lessThanDate","regex"],"mappings":"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","file":"Validator.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Validator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Validator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Validator\"] = factory();\n\telse\n\t\troot[\"Validator\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ValidatorDom = __webpack_require__(1);\n\t\n\tvar _ValidatorDom2 = _interopRequireDefault(_ValidatorDom);\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\texports.default = _ValidatorDom2.default;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _util = __webpack_require__(2);\n\t\n\tvar _Validator = __webpack_require__(3);\n\t\n\tvar _Validator2 = _interopRequireDefault(_Validator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\r\n\t * validator 组件\r\n\t */\n\tvar Validator = function (_ValidatorCore) {\n\t  _inherits(Validator, _ValidatorCore);\n\t\n\t  function Validator() {\n\t    _classCallCheck(this, Validator);\n\t\n\t    return _possibleConstructorReturn(this, (Validator.__proto__ || Object.getPrototypeOf(Validator)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Validator, [{\n\t    key: 'afterFieldValidate',\n\t\n\t\n\t    /**\r\n\t     * Field 验证之后处理\r\n\t     * @param isSuccess\r\n\t     * @param errors\r\n\t     */\n\t    value: function afterFieldValidate(isSuccess, errors) {\n\t      // 错误信息操作\n\t      if (errors) {\n\t        // 添加错误类信息\n\t        var clazz = this.opts.prefix + '-error';\n\t        errors.clazz = clazz;\n\t        // 设置错误 id\n\t        errors.placeId = (clazz + '_' + (errors.id || errors.name)).replace('-', '_');\n\t\n\t        // 当前条目验证结果展示\n\t        if (isSuccess) {\n\t          this._removeErrorPlace(errors);\n\t        } else {\n\t          this._addErrorPlace(errors);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * 绑定用户输入事件和改变事件\r\n\t     * @param {String} name 属性\r\n\t     * @param {String} level 事件级别 off/change/all\r\n\t     */\n\t\n\t  }, {\n\t    key: 'onInputEvent',\n\t    value: function onInputEvent(name, level) {\n\t      var validateFieldFunc = function (that) {\n\t        return function (e) {\n\t          try {\n\t            var evt = (0, _util.getCurrentEvent)(e);\n\t            var el = evt.target || evt.srcElement;\n\t            var field = that.fields[el.name];\n\t\n\t            // 设置触发事件的表单元素\n\t            field.el = that._getArrayByName(field.name);\n\t            // 验证单个表单\n\t            return that._validateField(field);\n\t          } catch (ex) {\n\t            return null;\n\t          }\n\t        };\n\t      }(this);\n\t\n\t      // 绑定表单值改变拦截\n\t      var formEls = name ? this._getArrayByName(name) : this.form.elements;\n\t\n\t      for (var i = 0, formElsLength = formEls.length; i < formElsLength; i++) {\n\t        var oninput = void 0;\n\t        var onchange = void 0;\n\t        var noop = function noop() {};\n\t        var thatLevel = level || this.opts.eventLevel;\n\t        // 触发事件绑定\n\t        switch (thatLevel) {\n\t          case 'off':\n\t            oninput = noop;\n\t            onchange = noop;\n\t            break;\n\t          case 'change':\n\t            oninput = noop;\n\t            onchange = validateFieldFunc;\n\t            break;\n\t          case 'all':\n\t            oninput = validateFieldFunc;\n\t            onchange = validateFieldFunc;\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t        // 针对 IE 浏览器使用 onkeyup 事件\n\t        var thisEl = formEls[i];\n\t        if (!!window.ActiveXObject || 'ActiveXObject' in window) {\n\t          thisEl.onkeyup = oninput;\n\t        } else {\n\t          thisEl.oninput = oninput;\n\t        }\n\t        thisEl.onchange = onchange;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * 移除当前条目错误信息\r\n\t     * @param {Object} errorObj 验证信息域\r\n\t     */\n\t\n\t  }, {\n\t    key: '_removeErrorPlace',\n\t    value: function _removeErrorPlace(errorObj) {\n\t      if (!errorObj.el) {\n\t        return;\n\t      }\n\t\n\t      // 移除表单域错误类\n\t      for (var i = 0, elLength = errorObj.el.length; i < elLength; i++) {\n\t        (0, _util.removeClass)(errorObj.el[i], errorObj.clazz);\n\t        (0, _util.addClass)(errorObj.el[i], this.opts.prefix + '-success');\n\t      }\n\t\n\t      // 移除错误信息节点\n\t      var errorEl = document.getElementById(errorObj.placeId);\n\t      errorEl && errorEl.parentNode.removeChild(errorEl);\n\t    }\n\t\n\t    /**\r\n\t     * 添加当前条目错误信息\r\n\t     * @param {Object} errorObj 验证信息域\r\n\t     */\n\t\n\t  }, {\n\t    key: '_addErrorPlace',\n\t    value: function _addErrorPlace(errorObj) {\n\t      if (!errorObj.el) {\n\t        return;\n\t      }\n\t\n\t      // 清除之前保留的错误信息\n\t      this._removeErrorPlace(errorObj);\n\t\n\t      var opts = this.opts;\n\t\n\t      // 当前表单域添加错误类\n\t      for (var i = 0, elLength = errorObj.el.length; i < elLength; i++) {\n\t        (0, _util.removeClass)(errorObj.el[i], opts.prefix + '-success');\n\t        (0, _util.addClass)(errorObj.el[i], errorObj.clazz);\n\t      }\n\t\n\t      // 创建元素\n\t      var errorEl = document.createElement(opts.errorEl);\n\t      (0, _util.addClass)(errorEl, errorObj.clazz + '-message');\n\t      errorEl.setAttribute('id', errorObj.placeId);\n\t      errorEl.innerText = errorObj.message;\n\t\n\t      // 错误信息位置\n\t      if (typeof opts.errorPlacement === 'function') {\n\t        // 参数：错误信息节点，当前表单节点\n\t        opts.errorPlacement(errorEl, errorObj.el[0]);\n\t      } else {\n\t        // 默认错误信息位置\n\t        // label 、 radio 元素错误位置不固定，默认暂不设置\n\t        var fieldEl = errorObj.el[0];\n\t        if (!(0, _util.isRadioOrCheckbox)(fieldEl)) {\n\t          fieldEl.parentNode.appendChild(errorEl);\n\t        }\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Validator;\n\t}(_Validator2.default);\n\t\n\texports.default = Validator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\r\n\t * 判断 field 是否为字符串\r\n\t * @param {Object} field 验证域\r\n\t * @return {String} 返回值\r\n\t */\n\tfunction getValue(field) {\n\t  return typeof field === 'string' ? field : field.value;\n\t}\n\t\n\t/**\r\n\t * 对象继承\r\n\t * @param {Object} target\r\n\t * @param {Object} source\r\n\t * @return {Object} target\r\n\t */\n\tfunction extend(target, source) {\n\t  for (var key in source) {\n\t    target[key] = source[key];\n\t  }\n\t  return target;\n\t}\n\t\n\t/**\r\n\t * 设置除主属性的验证域为默认值\r\n\t * @param field\r\n\t * @return field\r\n\t */\n\tfunction initField(field) {\n\t  field.id = null;\n\t  field.el = null;\n\t  field.type = null;\n\t  field.value = null;\n\t  field.checked = null;\n\t  return field;\n\t}\n\t\n\t/**\r\n\t * 转换为日期\r\n\t * @param {String} param 日期格式：yyyy-MM-dd\r\n\t * @return {Date}\r\n\t */\n\tfunction parseToDate(param) {\n\t  var thatDate = new Date();\n\t  var dateArray = param.split('-');\n\t\n\t  thatDate.setFullYear(dateArray[0]);\n\t  thatDate.setMonth(dateArray[1] - 1);\n\t  thatDate.setDate(dateArray[2]);\n\t  return thatDate;\n\t}\n\t\n\t/**\r\n\t * 是否为浏览器环境\r\n\t * @return {Boolean}\r\n\t */\n\tfunction isBrowser() {\n\t  return typeof window !== 'undefined';\n\t}\n\t\n\t/**\r\n\t * 获取当前事件，兼容火狐浏览器\r\n\t * @param {Event} evt\r\n\t * @return {Event}\r\n\t */\n\tfunction getCurrentEvent(evt) {\n\t  return isBrowser() ? evt || window.event : null;\n\t}\n\t\n\t/**\r\n\t * 判断节点是否为 radio 或者 checkbox\r\n\t * @param el 传入节点\r\n\t * @return {Boolean}\r\n\t */\n\tfunction isRadioOrCheckbox(el) {\n\t  return el.type === 'radio' || el.type === 'checkbox';\n\t}\n\t\n\t/**\r\n\t * 判断节点是否为 select\r\n\t * @param {Element} elArray 传入节点\r\n\t * @return {Boolean}\r\n\t */\n\tfunction isSelect(elArray) {\n\t  return elArray[0].tagName === 'OPTION';\n\t}\n\t\n\t/**\r\n\t * 表单 name 属性相同且不是 radio 或 checkbox 的表单域\r\n\t * @param elArray 传入节点\r\n\t * @return {Boolean}\r\n\t */\n\tfunction isSameNameField(elArray) {\n\t  return elArray && elArray.length && !isRadioOrCheckbox(elArray[0]) && !isSelect(elArray);\n\t}\n\t\n\t/**\r\n\t * 通过 name 获取节点集合\r\n\t * @param {String} name 属性\r\n\t */\n\tfunction getElementsByName(name) {\n\t  return document.getElementsByName(name);\n\t}\n\t\n\t/**\r\n\t * 获取节点对象的属性\r\n\t * @param {Object} elArray 传入节点\r\n\t * @param {String} attributeName 需要获取的属性\r\n\t * @return {String} 属性值\r\n\t */\n\tfunction attributeValue(elArray, attributeName) {\n\t  if (isRadioOrCheckbox(elArray[0])) {\n\t    for (var i = 0, elLength = elArray.length; i < elLength; i++) {\n\t      if (elArray[i].checked) {\n\t        return elArray[i][attributeName];\n\t      }\n\t    }\n\t  }\n\t  return elArray[0][attributeName];\n\t}\n\t\n\t/**\r\n\t * 判断是否包含 class\r\n\t * @param {Element} el\r\n\t * @param {String} cls 类名\r\n\t */\n\tfunction hasClass(el, cls) {\n\t  return el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n\t}\n\t\n\t/**\r\n\t * 添加 class\r\n\t * @param {Element} el\r\n\t * @param {String} cls 类名\r\n\t */\n\tfunction addClass(el, cls) {\n\t  if (!hasClass(el, cls)) {\n\t    el.classList ? el.classList.add(cls) : el.className += ' ' + cls;\n\t  }\n\t}\n\t\n\t/**\r\n\t * 移除 class\r\n\t * @param {Element} el\r\n\t * @param {String} cls 类名\r\n\t */\n\tfunction removeClass(el, cls) {\n\t  if (hasClass(el, cls)) {\n\t    var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\t    el.classList ? el.classList.remove(cls) : el.className = el.className.replace(reg, ' ');\n\t  }\n\t}\n\t\n\texports.getValue = getValue;\n\texports.extend = extend;\n\texports.initField = initField;\n\texports.parseToDate = parseToDate;\n\texports.isBrowser = isBrowser;\n\texports.getCurrentEvent = getCurrentEvent;\n\texports.isRadioOrCheckbox = isRadioOrCheckbox;\n\texports.isSelect = isSelect;\n\texports.isSameNameField = isSameNameField;\n\texports.getElementsByName = getElementsByName;\n\texports.attributeValue = attributeValue;\n\texports.addClass = addClass;\n\texports.removeClass = removeClass;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _util = __webpack_require__(2);\n\t\n\tvar _testHook = __webpack_require__(4);\n\t\n\tvar _testHook2 = _interopRequireDefault(_testHook);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * 核心验证组件，不包括事件及 dom 操作\r\n\t */\n\tvar Validate = function () {\n\t  function Validate(options) {\n\t    _classCallCheck(this, Validate);\n\t\n\t    // 绑定验证方法\n\t    for (var key in _testHook2.default) {\n\t      this[key] = _testHook2.default[key];\n\t    }\n\t\n\t    // 无参数\n\t    if (!options) {\n\t      return this;\n\t    }\n\t\n\t    this._default = {\n\t      // css 类前缀\n\t      prefix: 'valid',\n\t      // 错误信息节点\n\t      errorEl: 'em',\n\t      // 表单触发事件级别\n\t      eventLevel: 'all'\n\t    };\n\t\n\t    // 替换默认参数\n\t    this.opts = (0, _util.extend)(this._default, options);\n\t    this.form = {};\n\t    this.bodyData = options.bodyData;\n\t    this.errors = {};\n\t    this.fields = {};\n\t    this.handles = {};\n\t\n\t    // 构建具有所有需要验证的信息域\n\t    this.addFields(this.opts.fields);\n\t\n\t    // 有 form 表单的验证\n\t    if ((0, _util.isBrowser)() && this.opts.formName) {\n\t      // 获取表单对象\n\t      this.form = document.forms[this.opts.formName];\n\t\n\t      // HTML5 添加 novalidate\n\t      this.form.setAttribute('novalidate', 'novalidate');\n\t\n\t      // 绑定用户输入事件\n\t      this.onInputEvent && this.onInputEvent(null, 'all');\n\t\n\t      // 绑定提交事件\n\t      this._onSubmit();\n\t    }\n\t    return this;\n\t  }\n\t\n\t  /**\r\n\t   * 验证整体表单域\r\n\t   * @param  {Event} evt 当前事件\r\n\t   * @return {Boolean} 是否成功\r\n\t   */\n\t\n\t\n\t  _createClass(Validate, [{\n\t    key: 'validate',\n\t    value: function validate(evt) {\n\t      this.handles.evt = (0, _util.getCurrentEvent)(evt);\n\t      var isSuccess = true;\n\t      var fields = this.fields;\n\t\n\t      for (var name in fields) {\n\t        // 通过 name 验证\n\t        if (!this.validateByName(name)) {\n\t          isSuccess = false;\n\t        }\n\t      }\n\t\n\t      // 如果有错误，停止 submit 提交，并停止执行回调函数\n\t      if (!isSuccess) {\n\t        this.preventSubmit();\n\t      } else {\n\t        // 将 null 暴露到 callback 函数中\n\t        this.errors = null;\n\t      }\n\t\n\t      // 执行回调函数\n\t      if (typeof this.opts.callback === 'function') {\n\t        this.opts.callback(this.errors, this.handles.evt);\n\t      }\n\t\n\t      return isSuccess;\n\t    }\n\t\n\t    /**\r\n\t     * 验证单个表单域\r\n\t     * @param {String} name 属性\r\n\t     * @return {Boolean} 是否成功\r\n\t     */\n\t\n\t  }, {\n\t    key: 'validateByName',\n\t    value: function validateByName(name) {\n\t      var field = this.fields[name];\n\t      var isSuccess = false;\n\t\n\t      // 单个验证没找到规则\n\t      if (!field) {\n\t        return isSuccess;\n\t      }\n\t\n\t      // 获取验证的 DOM 节点数组\n\t      var el = this._getArrayByName(field.name);\n\t\n\t      // 表单 name 属性相同且不是 radio、checkbox、select 的表单域\n\t      if ((0, _util.isSameNameField)(el)) {\n\t        // 默认通过验证，若有一个错误，则不通过\n\t        var isMultiSuccess = true;\n\t        for (var i = 0, elLength = el.length; i < elLength; i++) {\n\t          // 当前验证的 field 对象\n\t          // 默认设置 el 为数组对象\n\t          field.el = [el[i]];\n\t          // 若有一个错误，则不通过\n\t          if (!this._validateField(field)) {\n\t            isMultiSuccess = false;\n\t          }\n\t        }\n\t        isSuccess = isMultiSuccess;\n\t      } else {\n\t        // 正常验证\n\t        field.el = el;\n\t        isSuccess = this._validateField(field);\n\t      }\n\t\n\t      return isSuccess;\n\t    }\n\t\n\t    /**\r\n\t     * 阻止表单提交\r\n\t     */\n\t\n\t  }, {\n\t    key: 'preventSubmit',\n\t    value: function preventSubmit() {\n\t      var evt = this.handles.evt;\n\t\n\t      if (evt && evt.preventDefault) {\n\t        evt.preventDefault();\n\t      } else if (evt) {\n\t        // IE 使用的全局变量\n\t        evt.returnValue = false;\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * 扩展校验方法\r\n\t     * @param {String} name 校验名称\r\n\t     * @param {Function} method 校验方法\r\n\t     */\n\t\n\t  }, {\n\t    key: 'addMethod',\n\t    value: function addMethod(name, method) {\n\t      if (typeof method === 'function') {\n\t        // 绑定验证方法\n\t        _testHook2.default[name] = method;\n\t\n\t        // 绑定至对象\n\t        this[name] = method;\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * 动态添加 fields 方法\r\n\t     * @param {Object} fields 对象\r\n\t     */\n\t\n\t  }, {\n\t    key: 'addFields',\n\t    value: function addFields(fields) {\n\t      if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) === 'object') {\n\t        // 构建具有所有需要验证的信息域\n\t        for (var name in fields) {\n\t          var field = fields[name];\n\t\n\t          // 规则正确，则进行\n\t          if (field.rules) {\n\t            // 初始化 其他属性\n\t            field.name = name;\n\t            field = (0, _util.initField)(field);\n\t\n\t            // 构建单个需要验证的信息域\n\t            this.fields[name] = field;\n\t          }\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * 动态移除 fields 方法\r\n\t     * @param {Array} fieldNames 名称\r\n\t     */\n\t\n\t  }, {\n\t    key: 'removeFields',\n\t    value: function removeFields(fieldNames) {\n\t      if (fieldNames instanceof Array) {\n\t        for (var i = 0, namesLength = fieldNames.length; i < namesLength; i++) {\n\t          // 移除对象\n\t          this.fields && delete this.fields[fieldNames[i]];\n\t          this.errors && delete this.errors[fieldNames[i]];\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * 绑定 submit 按钮提交事件\r\n\t     */\n\t\n\t  }, {\n\t    key: '_onSubmit',\n\t    value: function _onSubmit() {\n\t      var thatOnSubmit = this.form.onsubmit;\n\t      this.form.onsubmit = function (that) {\n\t        return function (e) {\n\t          try {\n\t            var evt = (0, _util.getCurrentEvent)(e);\n\t            return that.validate(evt) && (thatOnSubmit === undefined || thatOnSubmit());\n\t          } catch (ex) {\n\t            return null;\n\t          }\n\t        };\n\t      }(this);\n\t    }\n\t\n\t    /**\r\n\t     * 验证当前节点\r\n\t     * @param  {Object} field 验证信息域\r\n\t     * @return {Boolean} 是否成功\r\n\t     */\n\t\n\t  }, {\n\t    key: '_validateField',\n\t    value: function _validateField(field) {\n\t      var _this = this;\n\t\n\t      var thatField = field;\n\t      // 成功标识\n\t      var isSuccess = true;\n\t      // 错误对象\n\t      this.errors = this.errors || {};\n\t\n\t      // 更新验证域\n\t      thatField = this._updateField(thatField);\n\t\n\t      var isRequired = thatField.rules.indexOf('required') !== -1;\n\t      var isEmpty = thatField.value === undefined || thatField.value === '' || thatField.value === null;\n\t\n\t      var rules = thatField.rules.split(/\\s*\\|\\s*/g);\n\t\n\t      var _loop = function _loop(i, ruleLength) {\n\t        // 逐条验证，如果已经验证失败，则暂时不需要进入当前条目再次验证\n\t        if (!isSuccess) {\n\t          return 'break';\n\t        }\n\t\n\t        // 转换：max_length(12) => ['max_length', 12]\n\t        var method = rules[i];\n\t        var parts = /^(.+?)\\((.+)\\)$/.exec(method);\n\t        var param = '';\n\t\n\t        // 解析带参数的验证如 max_length(12)\n\t        if (parts) {\n\t          method = parts[1];\n\t          param = parts[2];\n\t        }\n\t\n\t        // 如果不是 required 这个字段，该值是空的，则不验证，继续下一个规则。\n\t        if (!isRequired && isEmpty) {\n\t          return 'continue';\n\t        }\n\t\n\t        // 匹配验证\n\t        if (typeof _testHook2.default[method] === 'function') {\n\t          if (!_testHook2.default[method].apply(_this, [thatField, param])) {\n\t            isSuccess = false;\n\t          }\n\t        }\n\t\n\t        // 错误信息域\n\t        _this.errors[thatField.name] = {\n\t          el: thatField.el,\n\t          id: thatField.id,\n\t          name: thatField.name,\n\t          rule: method\n\t        };\n\t\n\t        // 解析错误信息\n\t        if (!isSuccess) {\n\t          // 错误提示\n\t          _this.errors[thatField.name].message = function message() {\n\t            var seqText = thatField.messages ? thatField.messages.split(/\\s*\\|\\s*/g)[i] : '';\n\t\n\t            // 替换 {{value}} 和 {{param}} 为指定值\n\t            return seqText ? seqText.replace(/\\{\\{\\s*value\\s*}}/g, thatField.value).replace(/\\{\\{\\s*param\\s*}}/g, param) : seqText;\n\t          }();\n\t        }\n\t      };\n\t\n\t      _loop2: for (var i = 0, ruleLength = rules.length; i < ruleLength; i++) {\n\t        var _ret = _loop(i, ruleLength);\n\t\n\t        switch (_ret) {\n\t          case 'break':\n\t            break _loop2;\n\t\n\t          case 'continue':\n\t            continue;}\n\t      }\n\t\n\t      // 钩子：验证单个之后\n\t\n\t\n\t      this.afterFieldValidate && this.afterFieldValidate(isSuccess, this.errors[thatField.name]);\n\t\n\t      // 验证成功后，删除之前验证过的信息\n\t      if (isSuccess) {\n\t        delete this.errors[thatField.name];\n\t      }\n\t\n\t      return isSuccess;\n\t    }\n\t\n\t    /**\r\n\t     * 更新单个验证域\r\n\t     * field.el 统一为 Array 对象\r\n\t     * @param {Object} field 验证域\r\n\t     * @return {Object} field\r\n\t     */\n\t\n\t  }, {\n\t    key: '_updateField',\n\t    value: function _updateField(field) {\n\t      var thatField = field;\n\t      // 数据验证模式\n\t      if (this.bodyData) {\n\t        thatField.value = this.bodyData[thatField.name];\n\t        return thatField;\n\t      }\n\t\n\t      // 设置验证信息域属性\n\t      var el = thatField.el;\n\t      if (el) {\n\t        thatField.id = el[0].id;\n\t        thatField.type = el[0].type;\n\t        thatField.value = (0, _util.attributeValue)(el, 'value');\n\t        thatField.checked = (0, _util.attributeValue)(el, 'checked');\n\t      } else {\n\t        // 动态删除表单域之后清空对象值\n\t        thatField = (0, _util.initField)(field);\n\t      }\n\t      return thatField;\n\t    }\n\t\n\t    /**\r\n\t     * 获取 nodeList 转换为 Array 统一验证，并避免 IE 序列化崩溃 BUG\r\n\t     * @param {String} name 节点\r\n\t     */\n\t\n\t  }, {\n\t    key: '_getArrayByName',\n\t    value: function _getArrayByName(name) {\n\t      // 仅浏览器环境\n\t      if ((0, _util.isBrowser)()) {\n\t        var elObj = void 0;\n\t\n\t        // 若有 form 存在定位更精确\n\t        if (this.opts.formName) {\n\t          elObj = this.form[name];\n\t        } else {\n\t          elObj = (0, _util.getElementsByName)(name);\n\t        }\n\t\n\t        // 如果节点对象不存在或长度为零\n\t        if (!elObj || elObj.length === 0) {\n\t          return null;\n\t        }\n\t\n\t        // 将节点转换为数组\n\t        var arr = [];\n\t        var elLength = elObj.length;\n\t\n\t        // 排除 select， select 为数组形式\n\t        if (elLength && !(0, _util.isSelect)(elObj)) {\n\t          for (var i = 0; i < elLength; i++) {\n\t            arr.push(elObj[i]);\n\t          }\n\t        } else {\n\t          arr.push(elObj);\n\t        }\n\t        return arr;\n\t      }\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return Validate;\n\t}();\n\t\n\texports.default = Validate;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _regex = __webpack_require__(5);\n\t\n\tvar _regex2 = _interopRequireDefault(_regex);\n\t\n\tvar _util = __webpack_require__(2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t * 验证方法类\r\n\t */\n\tvar testHook = {\n\t\n\t  // 验证自然数\n\t  isNumeric: function isNumeric(field) {\n\t    return _regex2.default.numeric.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证整数\n\t  isInteger: function isInteger(field) {\n\t    return _regex2.default.integer.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证浮点数\n\t  isDecimal: function isDecimal(field) {\n\t    return _regex2.default.decimal.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证邮箱\n\t  isEmail: function isEmail(field) {\n\t    return _regex2.default.email.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证 IP 地址\n\t  isIp: function isIp(field) {\n\t    return _regex2.default.ip.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证座机\n\t  isTel: function isTel(field) {\n\t    return _regex2.default.tel.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证手机\n\t  isPhone: function isPhone(field) {\n\t    return _regex2.default.phone.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证字母数字下划线\n\t  isAbc: function isAbc(field) {\n\t    return _regex2.default.abc.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证URL\n\t  isUrl: function isUrl(field) {\n\t    return _regex2.default.url.test((0, _util.getValue)(field));\n\t  },\n\t\n\t\n\t  // 验证日期\n\t  isDate: function isDate(field) {\n\t    // 解析日期\n\t    var thatDate = (0, _util.getValue)(field);\n\t    if (_regex2.default.date.test(thatDate)) {\n\t      thatDate = thatDate.split('-');\n\t      var year = parseInt(thatDate[0], 10);\n\t      var month = parseInt(thatDate[1], 10);\n\t      var day = parseInt(thatDate[2], 10);\n\t\n\t      if (year < 1 || year > 9999 || month < 1 || month > 12) {\n\t        return false;\n\t      }\n\t\n\t      var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\t      // 闰年2月29号\n\t      if (year % 400 === 0 || year % 100 !== 0 && year % 4 === 0) {\n\t        numDays[1] = 29;\n\t      }\n\t\n\t      // 检查日期\n\t      return !(day < 1 || day > numDays[month - 1]);\n\t    }\n\t    return false;\n\t  },\n\t\n\t\n\t  // 是否为必填\n\t  required: function required(field) {\n\t    if ((0, _util.isRadioOrCheckbox)(field)) {\n\t      return field.checked === true;\n\t    }\n\t    return (0, _util.getValue)(field) !== null && (0, _util.getValue)(field) !== '';\n\t  },\n\t\n\t\n\t  // 多于 某个数\n\t  greaterThan: function greaterThan(field, param) {\n\t    var value = (0, _util.getValue)(field);\n\t    if (!_regex2.default.decimal.test(value)) {\n\t      return false;\n\t    }\n\t    return parseFloat(value) > parseFloat(param);\n\t  },\n\t\n\t\n\t  // 少于 某个数\n\t  lessThan: function lessThan(field, param) {\n\t    var value = (0, _util.getValue)(field);\n\t    if (!_regex2.default.decimal.test(value)) {\n\t      return false;\n\t    }\n\t    return parseFloat(value) < parseFloat(param);\n\t  },\n\t\n\t\n\t  // 最大长度\n\t  maxLength: function maxLength(field, length) {\n\t    if (!_regex2.default.integer.test(length)) {\n\t      return false;\n\t    }\n\t    return (0, _util.getValue)(field).length <= parseInt(length, 10);\n\t  },\n\t\n\t\n\t  // 最小长度\n\t  minLength: function minLength(field, length) {\n\t    if (!_regex2.default.integer.test(length)) {\n\t      return false;\n\t    }\n\t    return (0, _util.getValue)(field).length >= parseInt(length, 10);\n\t  },\n\t\n\t\n\t  // 大于某个日期\n\t  greaterThanDate: function greaterThanDate(field, date) {\n\t    var currentDate = (0, _util.parseToDate)((0, _util.getValue)(field));\n\t    var paramDate = (0, _util.parseToDate)(date);\n\t\n\t    if (!paramDate || !currentDate) {\n\t      return false;\n\t    }\n\t    return currentDate > paramDate;\n\t  },\n\t\n\t\n\t  // 小于某个日期\n\t  lessThanDate: function lessThanDate(field, date) {\n\t    var currentDate = (0, _util.parseToDate)((0, _util.getValue)(field));\n\t    var paramDate = (0, _util.parseToDate)(date);\n\t\n\t    if (!paramDate || !currentDate) {\n\t      return false;\n\t    }\n\t    return currentDate < paramDate;\n\t  }\n\t};\n\t\n\texports.default = testHook;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\r\n\t * 正则表达式\r\n\t */\n\tvar regex = {\n\t\n\t  // 自然数\n\t  numeric: /^\\d+$/,\n\t\n\t  // 整数\n\t  integer: /^-?\\d+$/,\n\t\n\t  // 浮点数\n\t  decimal: /^-?\\d*\\.?\\d+$/,\n\t\n\t  // 邮箱\n\t  email: /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n\t\n\t  // IP 地址 [ip ipv4、ipv6]\n\t  ip: /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])((\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}|(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){5})$/,\n\t\n\t  // 电话号码\n\t  tel: /^(([0+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/,\n\t\n\t  // 手机号码\n\t  phone: /^1[3-9]\\d{9}$/,\n\t\n\t  // 字母数字或下划线\n\t  abc: /^\\w+$/,\n\t\n\t  // URL\n\t  url: /[a-zA-Z]+:\\/\\/[^\\s]*/,\n\t\n\t  // 日期\n\t  date: /^\\d{4}-\\d{1,2}-\\d{1,2}$/\n\t};\n\t\n\texports.default = regex;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** Validator.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8e32ffe9d306a7d1e104\n **/","import Validator from './Validator-dom';\r\n\r\nexport default Validator;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import {\r\n  getCurrentEvent,\r\n  isRadioOrCheckbox,\r\n  addClass,\r\n  removeClass,\r\n} from './util';\r\nimport ValidatorCore from './Validator';\r\n\r\n/**\r\n * validator 组件\r\n */\r\nexport default class Validator extends ValidatorCore {\r\n\r\n  /**\r\n   * Field 验证之后处理\r\n   * @param isSuccess\r\n   * @param errors\r\n   */\r\n  afterFieldValidate(isSuccess, errors) {\r\n    // 错误信息操作\r\n    if (errors) {\r\n      // 添加错误类信息\r\n      const clazz = `${this.opts.prefix}-error`;\r\n      errors.clazz = clazz;\r\n      // 设置错误 id\r\n      errors.placeId = (`${clazz}_${errors.id || errors.name}`).replace('-', '_');\r\n\r\n      // 当前条目验证结果展示\r\n      if (isSuccess) {\r\n        this._removeErrorPlace(errors);\r\n      } else {\r\n        this._addErrorPlace(errors);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绑定用户输入事件和改变事件\r\n   * @param {String} name 属性\r\n   * @param {String} level 事件级别 off/change/all\r\n   */\r\n  onInputEvent(name, level) {\r\n    const validateFieldFunc = (function (that) {\r\n      return function (e) {\r\n        try {\r\n          const evt = getCurrentEvent(e);\r\n          const el = evt.target || evt.srcElement;\r\n          const field = that.fields[el.name];\r\n\r\n          // 设置触发事件的表单元素\r\n          field.el = that._getArrayByName(field.name);\r\n          // 验证单个表单\r\n          return that._validateField(field);\r\n        } catch (ex) {\r\n          return null;\r\n        }\r\n      };\r\n    }(this));\r\n\r\n    // 绑定表单值改变拦截\r\n    const formEls = name ? this._getArrayByName(name) : this.form.elements;\r\n\r\n    for (let i = 0, formElsLength = formEls.length; i < formElsLength; i++) {\r\n      let oninput;\r\n      let onchange;\r\n      const noop = function () {};\r\n      const thatLevel = level || this.opts.eventLevel;\r\n      // 触发事件绑定\r\n      switch (thatLevel) {\r\n        case 'off':\r\n          oninput = noop;\r\n          onchange = noop;\r\n          break;\r\n        case 'change':\r\n          oninput = noop;\r\n          onchange = validateFieldFunc;\r\n          break;\r\n        case 'all':\r\n          oninput = validateFieldFunc;\r\n          onchange = validateFieldFunc;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      // 针对 IE 浏览器使用 onkeyup 事件\r\n      const thisEl = formEls[i];\r\n      if (!!window.ActiveXObject || 'ActiveXObject' in window) {\r\n        thisEl.onkeyup = oninput;\r\n      } else {\r\n        thisEl.oninput = oninput;\r\n      }\r\n      thisEl.onchange = onchange;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 移除当前条目错误信息\r\n   * @param {Object} errorObj 验证信息域\r\n   */\r\n  _removeErrorPlace(errorObj) {\r\n    if (!errorObj.el) {\r\n      return;\r\n    }\r\n\r\n    // 移除表单域错误类\r\n    for (let i = 0, elLength = errorObj.el.length; i < elLength; i++) {\r\n      removeClass(errorObj.el[i], errorObj.clazz);\r\n      addClass(errorObj.el[i], `${this.opts.prefix}-success`);\r\n    }\r\n\r\n    // 移除错误信息节点\r\n    const errorEl = document.getElementById(errorObj.placeId);\r\n    errorEl && errorEl.parentNode.removeChild(errorEl);\r\n  }\r\n\r\n  /**\r\n   * 添加当前条目错误信息\r\n   * @param {Object} errorObj 验证信息域\r\n   */\r\n  _addErrorPlace(errorObj) {\r\n    if (!errorObj.el) {\r\n      return;\r\n    }\r\n\r\n    // 清除之前保留的错误信息\r\n    this._removeErrorPlace(errorObj);\r\n\r\n    const opts = this.opts;\r\n\r\n    // 当前表单域添加错误类\r\n    for (let i = 0, elLength = errorObj.el.length; i < elLength; i++) {\r\n      removeClass(errorObj.el[i], `${opts.prefix}-success`);\r\n      addClass(errorObj.el[i], errorObj.clazz);\r\n    }\r\n\r\n    // 创建元素\r\n    const errorEl = document.createElement(opts.errorEl);\r\n    addClass(errorEl, `${errorObj.clazz}-message`);\r\n    errorEl.setAttribute('id', errorObj.placeId);\r\n    errorEl.innerText = errorObj.message;\r\n\r\n    // 错误信息位置\r\n    if (typeof opts.errorPlacement === 'function') {\r\n      // 参数：错误信息节点，当前表单节点\r\n      opts.errorPlacement(errorEl, errorObj.el[0]);\r\n    } else {\r\n      // 默认错误信息位置\r\n      // label 、 radio 元素错误位置不固定，默认暂不设置\r\n      const fieldEl = errorObj.el[0];\r\n      if (!isRadioOrCheckbox(fieldEl)) {\r\n        fieldEl.parentNode.appendChild(errorEl);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Validator-dom.js\n **/","/**\r\n * 判断 field 是否为字符串\r\n * @param {Object} field 验证域\r\n * @return {String} 返回值\r\n */\r\nfunction getValue(field) {\r\n  return (typeof field === 'string') ? field : field.value;\r\n}\r\n\r\n/**\r\n * 对象继承\r\n * @param {Object} target\r\n * @param {Object} source\r\n * @return {Object} target\r\n */\r\nfunction extend(target, source) {\r\n  for (const key in source) {\r\n    target[key] = source[key];\r\n  }\r\n  return target;\r\n}\r\n\r\n/**\r\n * 设置除主属性的验证域为默认值\r\n * @param field\r\n * @return field\r\n */\r\nfunction initField(field) {\r\n  field.id = null;\r\n  field.el = null;\r\n  field.type = null;\r\n  field.value = null;\r\n  field.checked = null;\r\n  return field;\r\n}\r\n\r\n/**\r\n * 转换为日期\r\n * @param {String} param 日期格式：yyyy-MM-dd\r\n * @return {Date}\r\n */\r\nfunction parseToDate(param) {\r\n  const thatDate = new Date();\r\n  const dateArray = param.split('-');\r\n\r\n  thatDate.setFullYear(dateArray[0]);\r\n  thatDate.setMonth(dateArray[1] - 1);\r\n  thatDate.setDate(dateArray[2]);\r\n  return thatDate;\r\n}\r\n\r\n/**\r\n * 是否为浏览器环境\r\n * @return {Boolean}\r\n */\r\nfunction isBrowser() {\r\n  return typeof window !== 'undefined';\r\n}\r\n\r\n/**\r\n * 获取当前事件，兼容火狐浏览器\r\n * @param {Event} evt\r\n * @return {Event}\r\n */\r\nfunction getCurrentEvent(evt) {\r\n  return isBrowser() ? (evt || window.event) : null;\r\n}\r\n\r\n/**\r\n * 判断节点是否为 radio 或者 checkbox\r\n * @param el 传入节点\r\n * @return {Boolean}\r\n */\r\nfunction isRadioOrCheckbox(el) {\r\n  return el.type === 'radio' || el.type === 'checkbox';\r\n}\r\n\r\n/**\r\n * 判断节点是否为 select\r\n * @param {Element} elArray 传入节点\r\n * @return {Boolean}\r\n */\r\nfunction isSelect(elArray) {\r\n  return elArray[0].tagName === 'OPTION';\r\n}\r\n\r\n/**\r\n * 表单 name 属性相同且不是 radio 或 checkbox 的表单域\r\n * @param elArray 传入节点\r\n * @return {Boolean}\r\n */\r\nfunction isSameNameField(elArray) {\r\n  return elArray && elArray.length && !isRadioOrCheckbox(elArray[0]) && !isSelect(elArray);\r\n}\r\n\r\n/**\r\n * 通过 name 获取节点集合\r\n * @param {String} name 属性\r\n */\r\nfunction getElementsByName(name) {\r\n  return document.getElementsByName(name);\r\n}\r\n\r\n/**\r\n * 获取节点对象的属性\r\n * @param {Object} elArray 传入节点\r\n * @param {String} attributeName 需要获取的属性\r\n * @return {String} 属性值\r\n */\r\nfunction attributeValue(elArray, attributeName) {\r\n  if (isRadioOrCheckbox(elArray[0])) {\r\n    for (let i = 0, elLength = elArray.length; i < elLength; i++) {\r\n      if (elArray[i].checked) {\r\n        return elArray[i][attributeName];\r\n      }\r\n    }\r\n  }\r\n  return elArray[0][attributeName];\r\n}\r\n\r\n/**\r\n * 判断是否包含 class\r\n * @param {Element} el\r\n * @param {String} cls 类名\r\n */\r\nfunction hasClass(el, cls) {\r\n  return el.className.match(new RegExp(`(\\\\s|^)${cls}(\\\\s|$)`));\r\n}\r\n\r\n/**\r\n * 添加 class\r\n * @param {Element} el\r\n * @param {String} cls 类名\r\n */\r\nfunction addClass(el, cls) {\r\n  if (!hasClass(el, cls)) {\r\n    el.classList ? el.classList.add(cls) : el.className += ` ${cls}`;\r\n  }\r\n}\r\n\r\n/**\r\n * 移除 class\r\n * @param {Element} el\r\n * @param {String} cls 类名\r\n */\r\nfunction removeClass(el, cls) {\r\n  if (hasClass(el, cls)) {\r\n    const reg = new RegExp(`(\\\\s|^)${cls}(\\\\s|$)`);\r\n    el.classList ? el.classList.remove(cls) : el.className = el.className.replace(reg, ' ');\r\n  }\r\n}\r\n\r\nexport {\r\n  getValue,\r\n  extend,\r\n  initField,\r\n  parseToDate,\r\n  isBrowser,\r\n  getCurrentEvent,\r\n  isRadioOrCheckbox,\r\n  isSelect,\r\n  isSameNameField,\r\n  getElementsByName,\r\n  attributeValue,\r\n  addClass,\r\n  removeClass,\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/util.js\n **/","import {\r\n  extend,\r\n  initField,\r\n  isBrowser,\r\n  getCurrentEvent,\r\n  isSelect,\r\n  isSameNameField,\r\n  getElementsByName,\r\n  attributeValue,\r\n} from './util';\r\nimport testHook from './testHook';\r\n\r\n/**\r\n * 核心验证组件，不包括事件及 dom 操作\r\n */\r\nexport default class Validate {\r\n\r\n  constructor(options) {\r\n    // 绑定验证方法\r\n    for (const key in testHook) {\r\n      this[key] = testHook[key];\r\n    }\r\n\r\n    // 无参数\r\n    if (!options) {\r\n      return this;\r\n    }\r\n\r\n    this._default = {\r\n      // css 类前缀\r\n      prefix: 'valid',\r\n      // 错误信息节点\r\n      errorEl: 'em',\r\n      // 表单触发事件级别\r\n      eventLevel: 'all',\r\n    };\r\n\r\n    // 替换默认参数\r\n    this.opts = extend(this._default, options);\r\n    this.form = {};\r\n    this.bodyData = options.bodyData;\r\n    this.errors = {};\r\n    this.fields = {};\r\n    this.handles = {};\r\n\r\n    // 构建具有所有需要验证的信息域\r\n    this.addFields(this.opts.fields);\r\n\r\n    // 有 form 表单的验证\r\n    if (isBrowser() && this.opts.formName) {\r\n      // 获取表单对象\r\n      this.form = document.forms[this.opts.formName];\r\n\r\n      // HTML5 添加 novalidate\r\n      this.form.setAttribute('novalidate', 'novalidate');\r\n\r\n      // 绑定用户输入事件\r\n      this.onInputEvent && this.onInputEvent(null, 'all');\r\n\r\n      // 绑定提交事件\r\n      this._onSubmit();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 验证整体表单域\r\n   * @param  {Event} evt 当前事件\r\n   * @return {Boolean} 是否成功\r\n   */\r\n  validate(evt) {\r\n    this.handles.evt = getCurrentEvent(evt);\r\n    let isSuccess = true;\r\n    const fields = this.fields;\r\n\r\n    for (const name in fields) {\r\n      // 通过 name 验证\r\n      if (!this.validateByName(name)) {\r\n        isSuccess = false;\r\n      }\r\n    }\r\n\r\n    // 如果有错误，停止 submit 提交，并停止执行回调函数\r\n    if (!isSuccess) {\r\n      this.preventSubmit();\r\n    } else {\r\n      // 将 null 暴露到 callback 函数中\r\n      this.errors = null;\r\n    }\r\n\r\n    // 执行回调函数\r\n    if (typeof this.opts.callback === 'function') {\r\n      this.opts.callback(this.errors, this.handles.evt);\r\n    }\r\n\r\n    return isSuccess;\r\n  }\r\n\r\n  /**\r\n   * 验证单个表单域\r\n   * @param {String} name 属性\r\n   * @return {Boolean} 是否成功\r\n   */\r\n  validateByName(name) {\r\n    const field = this.fields[name];\r\n    let isSuccess = false;\r\n\r\n    // 单个验证没找到规则\r\n    if (!field) {\r\n      return isSuccess;\r\n    }\r\n\r\n    // 获取验证的 DOM 节点数组\r\n    const el = this._getArrayByName(field.name);\r\n\r\n    // 表单 name 属性相同且不是 radio、checkbox、select 的表单域\r\n    if (isSameNameField(el)) {\r\n      // 默认通过验证，若有一个错误，则不通过\r\n      let isMultiSuccess = true;\r\n      for (let i = 0, elLength = el.length; i < elLength; i++) {\r\n        // 当前验证的 field 对象\r\n        // 默认设置 el 为数组对象\r\n        field.el = [el[i]];\r\n        // 若有一个错误，则不通过\r\n        if (!this._validateField(field)) {\r\n          isMultiSuccess = false;\r\n        }\r\n      }\r\n      isSuccess = isMultiSuccess;\r\n    } else {\r\n      // 正常验证\r\n      field.el = el;\r\n      isSuccess = this._validateField(field);\r\n    }\r\n\r\n    return isSuccess;\r\n  }\r\n\r\n  /**\r\n   * 阻止表单提交\r\n   */\r\n  preventSubmit() {\r\n    const evt = this.handles.evt;\r\n\r\n    if (evt && evt.preventDefault) {\r\n      evt.preventDefault();\r\n    } else if (evt) {\r\n      // IE 使用的全局变量\r\n      evt.returnValue = false;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 扩展校验方法\r\n   * @param {String} name 校验名称\r\n   * @param {Function} method 校验方法\r\n   */\r\n  addMethod(name, method) {\r\n    if (typeof method === 'function') {\r\n      // 绑定验证方法\r\n      testHook[name] = method;\r\n\r\n      // 绑定至对象\r\n      this[name] = method;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 动态添加 fields 方法\r\n   * @param {Object} fields 对象\r\n   */\r\n  addFields(fields) {\r\n    if (typeof fields === 'object') {\r\n      // 构建具有所有需要验证的信息域\r\n      for (const name in fields) {\r\n        let field = fields[name];\r\n\r\n        // 规则正确，则进行\r\n        if (field.rules) {\r\n          // 初始化 其他属性\r\n          field.name = name;\r\n          field = initField(field);\r\n\r\n          // 构建单个需要验证的信息域\r\n          this.fields[name] = field;\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 动态移除 fields 方法\r\n   * @param {Array} fieldNames 名称\r\n   */\r\n  removeFields(fieldNames) {\r\n    if (fieldNames instanceof Array) {\r\n      for (let i = 0, namesLength = fieldNames.length; i < namesLength; i++) {\r\n        // 移除对象\r\n        this.fields && delete this.fields[fieldNames[i]];\r\n        this.errors && delete this.errors[fieldNames[i]];\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 绑定 submit 按钮提交事件\r\n   */\r\n  _onSubmit() {\r\n    const thatOnSubmit = this.form.onsubmit;\r\n    this.form.onsubmit = (function (that) {\r\n      return function (e) {\r\n        try {\r\n          const evt = getCurrentEvent(e);\r\n          return that.validate(evt) && (thatOnSubmit === undefined || thatOnSubmit());\r\n        } catch (ex) {\r\n          return null;\r\n        }\r\n      };\r\n    }(this));\r\n  }\r\n\r\n  /**\r\n   * 验证当前节点\r\n   * @param  {Object} field 验证信息域\r\n   * @return {Boolean} 是否成功\r\n   */\r\n  _validateField(field) {\r\n    let thatField = field;\r\n    // 成功标识\r\n    let isSuccess = true;\r\n    // 错误对象\r\n    this.errors = this.errors || {};\r\n\r\n    // 更新验证域\r\n    thatField = this._updateField(thatField);\r\n\r\n    const isRequired = thatField.rules.indexOf('required') !== -1;\r\n    const isEmpty = thatField.value === undefined || thatField.value === '' || thatField.value === null;\r\n\r\n    const rules = thatField.rules.split(/\\s*\\|\\s*/g);\r\n\r\n    for (let i = 0, ruleLength = rules.length; i < ruleLength; i++) {\r\n      // 逐条验证，如果已经验证失败，则暂时不需要进入当前条目再次验证\r\n      if (!isSuccess) {\r\n        break;\r\n      }\r\n\r\n      // 转换：max_length(12) => ['max_length', 12]\r\n      let method = rules[i];\r\n      const parts = /^(.+?)\\((.+)\\)$/.exec(method);\r\n      let param = '';\r\n\r\n      // 解析带参数的验证如 max_length(12)\r\n      if (parts) {\r\n        method = parts[1];\r\n        param = parts[2];\r\n      }\r\n\r\n      // 如果不是 required 这个字段，该值是空的，则不验证，继续下一个规则。\r\n      if (!isRequired && isEmpty) {\r\n        continue;\r\n      }\r\n\r\n      // 匹配验证\r\n      if (typeof testHook[method] === 'function') {\r\n        if (!testHook[method].apply(this, [thatField, param])) {\r\n          isSuccess = false;\r\n        }\r\n      }\r\n\r\n      // 错误信息域\r\n      this.errors[thatField.name] = {\r\n        el: thatField.el,\r\n        id: thatField.id,\r\n        name: thatField.name,\r\n        rule: method,\r\n      };\r\n\r\n      // 解析错误信息\r\n      if (!isSuccess) {\r\n        // 错误提示\r\n        this.errors[thatField.name].message = (function message() {\r\n          const seqText = thatField.messages ? thatField.messages.split(/\\s*\\|\\s*/g)[i] : '';\r\n\r\n          // 替换 {{value}} 和 {{param}} 为指定值\r\n          return seqText ? seqText.replace(/\\{\\{\\s*value\\s*}}/g, thatField.value).replace(/\\{\\{\\s*param\\s*}}/g, param) : seqText;\r\n        }());\r\n      }\r\n    }\r\n\r\n    // 钩子：验证单个之后\r\n    this.afterFieldValidate && this.afterFieldValidate(isSuccess, this.errors[thatField.name]);\r\n\r\n    // 验证成功后，删除之前验证过的信息\r\n    if (isSuccess) {\r\n      delete this.errors[thatField.name];\r\n    }\r\n\r\n    return isSuccess;\r\n  }\r\n\r\n  /**\r\n   * 更新单个验证域\r\n   * field.el 统一为 Array 对象\r\n   * @param {Object} field 验证域\r\n   * @return {Object} field\r\n   */\r\n  _updateField(field) {\r\n    let thatField = field;\r\n    // 数据验证模式\r\n    if (this.bodyData) {\r\n      thatField.value = this.bodyData[thatField.name];\r\n      return thatField;\r\n    }\r\n\r\n    // 设置验证信息域属性\r\n    const el = thatField.el;\r\n    if (el) {\r\n      thatField.id = el[0].id;\r\n      thatField.type = el[0].type;\r\n      thatField.value = attributeValue(el, 'value');\r\n      thatField.checked = attributeValue(el, 'checked');\r\n    } else {\r\n      // 动态删除表单域之后清空对象值\r\n      thatField = initField(field);\r\n    }\r\n    return thatField;\r\n  }\r\n\r\n  /**\r\n   * 获取 nodeList 转换为 Array 统一验证，并避免 IE 序列化崩溃 BUG\r\n   * @param {String} name 节点\r\n   */\r\n  _getArrayByName(name) {\r\n    // 仅浏览器环境\r\n    if (isBrowser()) {\r\n      let elObj;\r\n\r\n      // 若有 form 存在定位更精确\r\n      if (this.opts.formName) {\r\n        elObj = this.form[name];\r\n      } else {\r\n        elObj = getElementsByName(name);\r\n      }\r\n\r\n      // 如果节点对象不存在或长度为零\r\n      if (!elObj || elObj.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      // 将节点转换为数组\r\n      const arr = [];\r\n      const elLength = elObj.length;\r\n\r\n      // 排除 select， select 为数组形式\r\n      if (elLength && !isSelect(elObj)) {\r\n        for (let i = 0; i < elLength; i++) {\r\n          arr.push(elObj[i]);\r\n        }\r\n      } else {\r\n        arr.push(elObj);\r\n      }\r\n      return arr;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Validator.js\n **/","import regex from './regex';\r\nimport {\r\n  getValue,\r\n  parseToDate,\r\n  isRadioOrCheckbox,\r\n} from './util';\r\n\r\n/**\r\n * 验证方法类\r\n */\r\nconst testHook = {\r\n\r\n  // 验证自然数\r\n  isNumeric(field) {\r\n    return regex.numeric.test(getValue(field));\r\n  },\r\n\r\n  // 验证整数\r\n  isInteger(field) {\r\n    return regex.integer.test(getValue(field));\r\n  },\r\n\r\n  // 验证浮点数\r\n  isDecimal(field) {\r\n    return regex.decimal.test(getValue(field));\r\n  },\r\n\r\n  // 验证邮箱\r\n  isEmail(field) {\r\n    return regex.email.test(getValue(field));\r\n  },\r\n\r\n  // 验证 IP 地址\r\n  isIp(field) {\r\n    return regex.ip.test(getValue(field));\r\n  },\r\n\r\n  // 验证座机\r\n  isTel(field) {\r\n    return regex.tel.test(getValue(field));\r\n  },\r\n\r\n  // 验证手机\r\n  isPhone(field) {\r\n    return regex.phone.test(getValue(field));\r\n  },\r\n\r\n  // 验证字母数字下划线\r\n  isAbc(field) {\r\n    return regex.abc.test(getValue(field));\r\n  },\r\n\r\n  // 验证URL\r\n  isUrl(field) {\r\n    return regex.url.test(getValue(field));\r\n  },\r\n\r\n  // 验证日期\r\n  isDate(field) {\r\n    // 解析日期\r\n    let thatDate = getValue(field);\r\n    if (regex.date.test(thatDate)) {\r\n      thatDate = thatDate.split('-');\r\n      const year = parseInt(thatDate[0], 10);\r\n      const month = parseInt(thatDate[1], 10);\r\n      const day = parseInt(thatDate[2], 10);\r\n\r\n      if (year < 1 || year > 9999 || month < 1 || month > 12) {\r\n        return false;\r\n      }\r\n\r\n      const numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n      // 闰年2月29号\r\n      if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n        numDays[1] = 29;\r\n      }\r\n\r\n      // 检查日期\r\n      return !(day < 1 || day > numDays[month - 1]);\r\n    }\r\n    return false;\r\n  },\r\n\r\n  // 是否为必填\r\n  required(field) {\r\n    if (isRadioOrCheckbox(field)) {\r\n      return (field.checked === true);\r\n    }\r\n    return (getValue(field) !== null && getValue(field) !== '');\r\n  },\r\n\r\n  // 多于 某个数\r\n  greaterThan(field, param) {\r\n    const value = getValue(field);\r\n    if (!regex.decimal.test(value)) {\r\n      return false;\r\n    }\r\n    return (parseFloat(value) > parseFloat(param));\r\n  },\r\n\r\n  // 少于 某个数\r\n  lessThan(field, param) {\r\n    const value = getValue(field);\r\n    if (!regex.decimal.test(value)) {\r\n      return false;\r\n    }\r\n    return (parseFloat(value) < parseFloat(param));\r\n  },\r\n\r\n  // 最大长度\r\n  maxLength(field, length) {\r\n    if (!regex.integer.test(length)) {\r\n      return false;\r\n    }\r\n    return (getValue(field).length <= parseInt(length, 10));\r\n  },\r\n\r\n  // 最小长度\r\n  minLength(field, length) {\r\n    if (!regex.integer.test(length)) {\r\n      return false;\r\n    }\r\n    return (getValue(field).length >= parseInt(length, 10));\r\n  },\r\n\r\n  // 大于某个日期\r\n  greaterThanDate(field, date) {\r\n    const currentDate = parseToDate(getValue(field));\r\n    const paramDate = parseToDate(date);\r\n\r\n    if (!paramDate || !currentDate) {\r\n      return false;\r\n    }\r\n    return currentDate > paramDate;\r\n  },\r\n\r\n  // 小于某个日期\r\n  lessThanDate(field, date) {\r\n    const currentDate = parseToDate(getValue(field));\r\n    const paramDate = parseToDate(date);\r\n\r\n    if (!paramDate || !currentDate) {\r\n      return false;\r\n    }\r\n    return currentDate < paramDate;\r\n  },\r\n\r\n};\r\n\r\nexport default testHook;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/testHook.js\n **/","/**\r\n * 正则表达式\r\n */\r\nconst regex = {\r\n\r\n  // 自然数\r\n  numeric: /^\\d+$/,\r\n\r\n  // 整数\r\n  integer: /^-?\\d+$/,\r\n\r\n  // 浮点数\r\n  decimal: /^-?\\d*\\.?\\d+$/,\r\n\r\n  // 邮箱\r\n  email: /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n\r\n  // IP 地址 [ip ipv4、ipv6]\r\n  ip: /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])((\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}|(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){5})$/,\r\n\r\n  // 电话号码\r\n  tel: /^(([0+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/,\r\n\r\n  // 手机号码\r\n  phone: /^1[3-9]\\d{9}$/,\r\n\r\n  // 字母数字或下划线\r\n  abc: /^\\w+$/,\r\n\r\n  // URL\r\n  url: /[a-zA-Z]+:\\/\\/[^\\s]*/,\r\n\r\n  // 日期\r\n  date: /^\\d{4}-\\d{1,2}-\\d{1,2}$/,\r\n};\r\n\r\nexport default regex;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/regex.js\n **/"],"sourceRoot":""}