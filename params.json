{
  "name": "Validator.js",
  "tagline": "JavaScript表单验证，字符串验证",
  "body": "#validator.js\r\n\r\n[![Build Status](https://travis-ci.org/MinJieLiu/validator.js.svg?branch=master)](https://travis-ci.org/MinJieLiu/validator.js)\r\n[![npm version](https://badge.fury.io/js/validate-framework.svg)](https://badge.fury.io/js/validate-framework)\r\n\r\n一款轻量、强大、无依赖、前后端通用的 JavaScript 验证组件\r\n\r\nDemo： [http://minjieliu.github.io/validator.js/example](http://minjieliu.github.io/validator.js/example)\r\n\r\n## 特性\r\n\r\n 1. 轻量、无依赖\r\n 2. 自由，可脱离 `<form>` 验证\r\n 3. 前后端通用 （支持 express）\r\n 4. 字符串验证\r\n 5. 易于扩展\r\n 6. 相同 name 的表单验证\r\n 7. 动态验证\r\n 8. 兼容 chrome 、firfox 、IE6 +\r\n\r\n\r\n## 快速上手\r\n\r\n通过 `bower` 安装\r\n\r\n    bower install validate-framework\r\n\r\n通过 `npm` 安装\r\n\r\n    npm install validate-framework\r\n\r\n\r\n基本用法：\r\n\r\n```html\r\n<form id=\"validate_form\">\r\n    <div class=\"form-group\">\r\n        <label for=\"email\">邮箱：</label>\r\n        <input class=\"form-control\" id=\"email\" name=\"email\" type=\"email\" placeholder=\"请输入邮箱\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"phone\">手机：</label>\r\n        <input class=\"form-control\" id=\"phone\" name=\"phone\" type=\"text\" placeholder=\"请输入手机号\" />\r\n    </div>\r\n    <input class=\"btn btn-primary\" id=\"submit\" type=\"submit\" value=\"提交\" />\r\n</form>\r\n```\r\n\r\n```js\r\nvar validator = new Validator({\r\n    formName: 'validate_form',\r\n    fields: {\r\n        email: {\r\n            rules: 'required | is_email | max_length(32)',\r\n            messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n        },\r\n        phone: {\r\n            rules: 'is_phone',\r\n            messages: \"手机号： {{value}} 不合法\"\r\n        }\r\n    },\r\n    callback: function(errors, event) {\r\n        // 阻止表单提交\r\n        validator.preventSubmit();\r\n        // do something...\r\n    }\r\n});\r\n```\r\n\r\n无 `<form>` 用法：\r\n\r\n```html\r\n<div class=\"form-group\">\r\n    <label for=\"email\">邮箱：</label>\r\n    <input class=\"form-control\" id=\"email\" name=\"email\" type=\"email\" placeholder=\"请输入邮箱\" />\r\n</div>\r\n```\r\n\r\n```js\r\nvar validator = new Validator({\r\n    fields: {\r\n        email: {\r\n            rules: 'required | is_email | max_length(32)',\r\n            messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n        }\r\n    },\r\n    callback: function(errors, event) {\r\n        // do something...\r\n    }\r\n});\r\n// 手动触发验证\r\nvalidator.validate();\r\n```\r\n\r\n服务端用法：\r\n\r\n```js\r\nvar bodyData = {\r\n    email: \"example#example.com\",\r\n    birthday: \"2012-12-12\"\r\n};\r\nvar validator = new Validator({\r\n    bodyData: bodyData,\r\n    fields: {\r\n        email: {\r\n            rules: 'required | is_email | max_length(32)',\r\n            messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n        },\r\n        birthday: {\r\n            rules: 'required | is_date',\r\n            messages: \"不能为空 | 请输入合法日期\"\r\n        }\r\n    },\r\n    callback: function(errors, event) {\r\n        // do something...\r\n    }\r\n});\r\n// 手动触发验证\r\nvalidator.validate();\r\n```\r\n\r\n\r\n字符串验证：\r\n\r\n```js\r\n// 返回布尔值\r\nvar v = new Validator();\r\nv.isEmail('example@qq.com');\r\nv.isIp('192.168.1.1');\r\nv.isPhone('170111222231');\r\nv.lessThan('11', '22');\r\nv.greaterThanDate('2010-01-02', '2010-01-01');\r\n```\r\n\r\n\r\n\r\n## 说明文档\r\n\r\n> new Validator(options)\r\n\r\n### 参数（可选，无参为字符串验证）\r\n\r\n**`options`** （可选） 是 Validator 的第二个参数\r\n\r\n  * `formName` （可选） 是 `<form>` 中的 `name` 或者 `id` 的值\r\n  * `bodyData` （可选） 此参数用作 express 服务端的数据接收入口。此参数与`formName` 、`errorPlacement` 等 DOM 相关的参数不可同时存在\r\n  * `fields` （可选） 表单验证域 `rules` 和 `messages` 集合，后续可通过 `.addMethod(name, method)` 和 `.removeFields(fieldNames)` 进行变更\r\n  * `errorPlacement` （可选） 错误信息位置，默认位置为表单元素的后一个元素\r\n  * `callback` （可选） 表单提交 或 `.validate()` 调用后触发\r\n  * `errorClass` （可选） 验证错误 css 类，默认 `valid-error`\r\n  * `errorEl` （可选） 验证错误创建的元素，默认 `em`\r\n  * `eventLevel` （可选） 用户编辑表单后 触发事件级别，有三种参数可选： `off` 不监听，`change` 监听改变事件， `all` 监听输入事件和改变事件，默认 `all`。\r\n\r\n### 参数示例\r\n\r\n**`fields`** ：\r\n\r\n```js\r\nfields: {\r\n    email: {\r\n        rules: 'required | is_email | max_length(32)',\r\n        messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n    },\r\n    phone: {\r\n        rules: 'is_phone',\r\n        messages: \"手机号： {{value}} 不合法\"\r\n    }\r\n}\r\n```\r\n\r\n**`bodyData`** ： 遵循为 express 的 body-parser 表单数据格式：`{email: \"example#example.com\", birthday: \"2012-12-12\"}`\r\n\r\n注： `email` 、`phone` 为表单 `name` 属性<br />\r\n`rules` ：（必选） 一个或多个规则（中间用 ` | ` 分隔）<br />\r\n`messages` ：（可选） 相对应的错误提示（中间用 ` | ` 分隔） `{{value}}` 为表单中的 value 值， `{{param}}` 为 `max_length(32)` 的参数\r\n\r\n**`errorPlacement`** ：\r\n\r\n```js\r\nerrorPlacement: function(errorEl, fieldEl) {\r\n    // 非 label 、radio 元素\r\n    if (fieldEl.parentNode !== undefined) {\r\n        fieldEl.parentNode.appendChild(errorEl);\r\n    }\r\n},\r\n```\r\n\r\n注： `errorEl` 为错误信息节点，`fieldEl` 为验证的表单节点\r\n验证失败后，表单中会添加 `valid-error` ， 错误信息中添加 `valid-error-message` 类名\r\n\r\n**`callback`** ：\r\n\r\n```js\r\ncallback: function(errors, event) {\r\n    // 自定义逻辑\r\n    if (errors) {\r\n        // do something...\r\n    }\r\n}\r\n```\r\n\r\n注： `event` 当前事件<br />\r\n`errors` 验证失败的错误 json 集合。表单验证成功， `errors` 的值为 `null`\r\n\r\n\r\n### 方法\r\n\r\n * 方法都支持链式调用\r\n\r\n**`.validate()` 手动验证**\r\n\r\n注： 默认使用 submit 按钮提交进行拦截验证，可手动调用 `.validate()` 调用验证所有定义过的元素，返回值为 `Boolean`\r\n\r\n如：\r\n```js\r\nif (validator.validate()) {\r\n    // do something...\r\n};\r\n```\r\n\r\n**`.validateByName(name)` 手动验证单个表单域**\r\n\r\n注： 默认使用表单改变事件拦截验证，当使用 js 方法改变表单的值时，可手动调用 `.validateByName(name)` 进行验证单个域<br />\r\n`name` 参数为 表单域的 `name` 属性，返回值为 `Boolean`\r\n\r\n**`.preventSubmit()` 阻止表单提交**  无 `<form>` 的表单验证，则参数无效\r\n\r\n**`.addMethod(name, method)` 自定义验证方法**\r\n\r\n注： 当遇到默认方法无法实现验证的时候（大多数情况），添加`.addMethod(name, method)`方法进行扩展<br />\r\n`name` 为校验名称，格式： is_date<br />\r\n`method` 为自定义方法\r\n\r\n如：\r\n```js\r\n// checkbox 至少选择两项 方法\r\n// 扩展内部验证方法 field: 验证域， param: 参数 如 select_limit(2)\r\nvalidator.addMethod('select_limit', function(field, param) {\r\n    // checkbox 至少选择两项\r\n    var checkedNum = 0;\r\n    for (var i = 0, elLength = field.el.length; i < elLength; i++) {\r\n        if (field.el[i].checked) {\r\n            checkedNum += 1;\r\n        }\r\n    }\r\n    return checkedNum >= param;\r\n});\r\n```\r\n\r\n**`.onInputEvent(name, level)` 绑定用户输入事件和改变事件** \r\n\r\n注：`name` name 属性， `level` 事件级别：有三种参数可选： `off` 不监听，`change` 监听改变事件， `all` 监听输入事件和改变事件，默认 `all`<br />\r\n如：ajax 验证不需要很高的触发频率，可设置为 `change` 或 `off` 进行手动验证\r\n\r\n**`.addFields(fields)` 动态添加 fields 方法**\r\n\r\n注： 满足更多动态验证表单的需求。可通过 `.addFields(fields)` 来动态新增一个或多个表单验证域，参数和上述 `fields` 用法一样\r\n\r\n```js\r\nvalidator.addFields({\r\n    userName: {\r\n        rules: 'required | is_real_name',\r\n        messages: \"不能为空 | 请输入真实姓名\"\r\n    }\r\n});\r\n```\r\n\r\n**`.removeFields(fieldNames)` 动态移除 fields 方法**\r\n\r\n注： 满足更多动态验证表单的需求。可通过 `.removeFields(fieldNames)` 来动态移除一个表单验证域，移除之后，验证器不验证该元素<br />\r\n`fieldNames` 类型为 Array\r\n\r\n```js\r\n// 移除单个\r\nvalidator.removeFields(['userName']);\r\n// 移除多个\r\nvalidator.removeFields(['userName', 'email']);\r\n```\r\n\r\n**其他**\r\n\r\n 1. [动态验证] 当 `field` 验证条件存在，DOM节点不存在时，如果 `field` 包含 `required` 条件，则最终验证不通过，否则通过验证。\r\n 2. [事件监听] 如果动态验证中，新增节点，默认不会有表单监听，这时需 手动调用 `.onInputEvent(name, level)` 添加监听，无 `<form>` 表单默认无监听\r\n 3. [错误信息] 错误位置提示信息，`checkbox`、`radio` 元素对于 `label` 元素的位置不固定，各个 UI 组件不统一，默认不设置\r\n\r\n## 内置验证方法\r\n\r\n如：\r\n```js\r\nvar v = new Validator();\r\nv.isEmail('example@qq.com');\r\nv.isPhone('170111222231');\r\n```\r\n\r\n- [x] required(param)  验证必填\r\n- [x] isAbc(param)  验证字母数字下划线\r\n- [x] isDate(param)  验证日期\r\n- [x] isDecimal(param)  验证浮点数\r\n- [x] isEmail(param)  验证邮箱\r\n- [x] isInteger(param)  验证整数\r\n- [x] isIp(param)  验证 ip 地址\r\n- [x] isNumeric(param)  验证自然数\r\n- [x] isPhone(param)  验证手机\r\n- [x] isTel(param)  验证座机\r\n- [x] isUrl(param)  验证URL\r\n- [x] maxLength(param, length)  最大长度\r\n- [x] minLength(param, length)  最小长度\r\n- [x] greaterThan(param1, param2)  多于某个数\r\n- [x] lessThan(param1, param2)  少于某个数\r\n- [x] greaterThanDate(date1, date2)  大于某个日期\r\n- [x] lessThanDate(date1, date2)  小于某个日期\r\n\r\n验证方法不够？ `.addMethod(name, method)` 添加自定义验证方法（与表单验证自定义方法类似）\r\n\r\n\r\n## 备注\r\n\r\n`validate-framework`组件只包含验证实现，不包括 UI，因此 UI 部分可以自由发挥<br />\r\n`validate-framework`不依赖 jQuery 及其他类库，可结合 jQuery 及其他类库使用\r\n\r\n\r\n##与 1.x.x API 变更\r\n\r\n 1. 将 `formName` 位置放入 `options` 中，并可允许不是必选项\r\n 2. 动态添加的表单元素，需添加监听方法 `.onInputEvent(name, level)`\r\n 3. `callback` 参数中，方法 errors, event 顺序改变\r\n 4. `removeFields` 只允许数组参数\r\n 5. 内部变量 `field.el` 的 `el` 为数组形式\r\n\r\n## 规范\r\n\r\n`validate-framework`采用 `eslint` 来保持代码的正确性和可读性，详情见 `.eslintrc` 文件\r\n\r\n\r\n## 更新日志\r\n\r\n### v2.0.0\r\n\r\n1.  [新增] 服务端验证\r\n2.  [新增] 无 <form> 验证\r\n3.  [修改] `formName` 为非必选项\r\n4.  [修改] 多处重构\r\n5.  [修改] 调整 API\r\n\r\n### v1.4.1\r\n\r\n1.  [修正] 执行 `.removeFields` 方法后，应删除对应的错误域\r\n2.  变更 email 正则\r\n3.  注释修正\r\n\r\n### v1.4.0\r\n\r\n1.  [新增] `.addFields` 和 `.removeFields` 扩展方法\r\n2.  实现动态验证表单域\r\n3.  微调内部函数结构\r\n\r\n### v1.3.0\r\n\r\n1.  [新增] 相同 name 属性表单验证\r\n2.  兼容未在 dom 中的元素，可预先定义\r\n3.  微调内部函数名称\r\n\r\n\r\n## LICENSE\r\n\r\nMIT\r\n\r\n## 参考\r\n\r\nhttps://github.com/jaywcjlove/validator.js\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}