{
  "name": "Validator.js",
  "tagline": "JavaScript表单验证，字符串验证",
  "body": "#validator.js\r\n\r\n[![Build Status](https://travis-ci.org/MinJieLiu/validator.js.svg?branch=master)](https://travis-ci.org/MinJieLiu/validator.js)\r\n[![npm version](https://badge.fury.io/js/validate-framework.svg)](https://badge.fury.io/js/validate-framework)\r\n\r\nvalidator.js 是一个轻量级 JavaScript 表单、字符串验证库\r\n\r\nDemo： [http://minjieliu.github.io/validator.js/example](http://minjieliu.github.io/validator.js/example)\r\n\r\n## 特性\r\n\r\n 1. 轻量级\r\n 2. 无依赖\r\n 3. 表单验证\r\n 4. 字符串验证\r\n 5. 易扩展\r\n 6. 支持 chrome 、firfox 、IE6 +\r\n 7. 支持相同 name 的表单验证\r\n\r\n\r\n## 快速上手\r\n\r\n通过 `bower` 安装\r\n\r\n    bower install validate-framework\r\n\r\n通过 `npm` 安装\r\n\r\n    npm install validate-framework\r\n\r\n\r\n表单验证：\r\n\r\n```html\r\n<form id=\"validate_form\">\r\n    <div class=\"form-group\">\r\n        <label for=\"email\">邮箱：</label>\r\n        <input class=\"form-control\" id=\"email\" name=\"email\" type=\"email\" placeholder=\"请输入邮箱\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"phone\">手机：</label>\r\n        <input class=\"form-control\" id=\"phone\" name=\"phone\" type=\"text\" placeholder=\"请输入手机号\" />\r\n    </div>\r\n    <input class=\"btn btn-primary\" id=\"submit\" type=\"submit\" value=\"提交\" />\r\n</form>\r\n```\r\n\r\n```js\r\nvar validator = new Validator('validate_form', {\r\n    fields: {\r\n        email: {\r\n            rules: 'required | is_email | max_length(32)',\r\n            messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n        },\r\n        phone: {\r\n            rules: 'is_phone',\r\n            messages: \"手机号： {{value}} 不合法\"\r\n        }\r\n    },\r\n    // 参数：errorEl 错误信息节点，fieldEl 出现错误的表单节点\r\n    errorPlacement: function(errorEl, fieldEl) {\r\n        // 错误位置\r\n    },\r\n    callback: function(event, errors) {\r\n        // 阻止表单提交\r\n        validator.preventSubmit();\r\n        // 回调函数\r\n    }\r\n});\r\n```\r\n\r\n字符串验证：\r\n\r\n```js\r\n// 返回布尔值\r\nvar v = new Validator();\r\nv.isEmail('example@qq.com');\r\nv.isIp('192.168.1.1');\r\nv.isPhone('170111222231');\r\nv.lessThan('11', '22');\r\nv.greaterThanDate('2010-01-02', '2010-01-01');\r\n```\r\n\r\n\r\n\r\n## 表单验证说明文档\r\n\r\n> new Validator(formName, options)\r\n\r\n### 参数（可选，无参为字符串验证）\r\n\r\n**`formName`** （必需） 是标签中 `<form>` 中的 `id` 或者 `name` 的值\r\n\r\n**`options`** （必需） 是 Validator 的第二个参数\r\n\r\n  * `fields` 表单验证域 `rules` 和 `messages` 集合\r\n  * `errorPlacement` （可选） 错误信息位置\r\n  * `callback` （可选） 验证成功或失败后回调函数\r\n\r\n### 参数详细\r\n\r\n**`fields`** ：\r\n\r\n```js\r\nfields: {\r\n    email: {\r\n        rules: 'required | is_email | max_length(32)',\r\n        messages: \"不能为空 | 请输入合法邮箱 | 不能超过 {{param}} 个字符\"\r\n    },\r\n    phone: {\r\n        rules: 'is_phone',\r\n        messages: \"手机号： {{value}} 不合法\"\r\n    }\r\n}\r\n```\r\n\r\n注： `email` 、`phone` 为表单 `name` 属性<br />\r\n`rules` ： 一个或多个规则（中间用 ` | ` 分隔）<br />\r\n`messages` ： 相对应的错误提示（中间用 ` | ` 分隔） `{{value}}` 为表单中的 value 值， `{{param}}` 为 `max_length(32)` 的参数 <br /> （不填写则没有提示）\r\n\r\n**`errorPlacement`** ：\r\n\r\n```js\r\nerrorPlacement: function(errorEl, fieldEl) {\r\n    // 非 label 、radio 元素\r\n    if (fieldEl.parentNode !== undefined) {\r\n        fieldEl.parentNode.appendChild(errorEl);\r\n    }\r\n},\r\n```\r\n\r\n注： `errorEl` 为错误信息节点，`fieldEl` 为出现错误的表单节点\r\n验证失败后 validator.js 会在类似文本框表单中添加 `valid-error` ， checkbox、radio 中添加 `valid-label-error` 错误信息中添加 `valid-error-message` class 类\r\n\r\n**`callback`** ：\r\n\r\n```js\r\ncallback: function(event, errors) {\r\n    // 自定义逻辑\r\n    if (errors) {\r\n        // 验证失败逻辑\r\n    }\r\n}\r\n```\r\n\r\n注： `event` 当前事件<br />\r\n`errors` 验证失败的表单域对象。表单验证成功， `errors` 的值为 `null`\r\n\r\n\r\n### 方法\r\n\r\n例如：\r\n```js\r\nvalidator.validate();\r\n```\r\n\r\n**`.validate()` 手动验证**\r\n\r\n注： validator.js 默认使用 submit 按钮提交进行拦截验证，可手动调用 `.validate()` 调用验证 form 所有定义过的元素\r\n\r\n**`.validateByName(name)` 手动验证单个表单域**\r\n\r\n注： validator.js 默认使用表单改变事件拦截验证，当使用 js 方法改变表单的值时，可手动调用 `.validateByName(name)` 进行验证单个域， `name` 参数为 表单域的 `name` 属性\r\n\r\n**`.preventSubmit()` 阻止表单提交**\r\n\r\n**`.addMethod(name, method)` 自定义验证方法**\r\n\r\n注： 当遇到 validator.js 提供的默认方法无法实现验证的时候，添加`.addMethod(name, method)`方法进行扩展<br />\r\n`name` 为校验名称，格式： is_date<br />\r\n`method` 为自定义方法\r\n\r\n如：\r\n```js\r\n// checkbox 至少选择两项 方法\r\n// 扩展内部验证方法 field: 验证域， param: 参数 如 select_limit(2)\r\nvalidator.addMethod('select_limit', function(field, param) {\r\n    // checkbox 至少选择两项\r\n    var checkedNum = 0;\r\n    for (var i = 0, elLength = field.el.length; i < elLength; i++) {\r\n        if (field.el[i].checked) {\r\n            checkedNum += 1;\r\n        }\r\n    }\r\n    return checkedNum >= param;\r\n});\r\n```\r\n\r\n## 字符串验证说明文档\r\n\r\n如：\r\n```js\r\nvar v = new Validator();\r\nv.isEmail('example@qq.com');\r\nv.isPhone('170111222231');\r\n```\r\n\r\n- [x] required(param)  验证必填\r\n- [x] isAbc(param)  验证字母数字下划线\r\n- [x] isDate(param)  验证日期\r\n- [x] isDecimal(param)  验证浮点数\r\n- [x] isEmail(param)  验证邮箱\r\n- [x] isInteger(param)  验证整数\r\n- [x] isIp(param)  验证 ip 地址\r\n- [x] isNumeric(param)  验证自然数\r\n- [x] isPhone(param)  验证手机\r\n- [x] isTel(param)  验证座机\r\n- [x] isUrl(param)  验证URL\r\n- [x] maxLength(param, length)  最大长度\r\n- [x] minLength(param, length)  最小长度\r\n- [x] greaterThan(param1, param2)  多于某个数\r\n- [x] lessThan(param1, param2)  少于某个数\r\n- [x] greaterThanDate(date1, date2)  大于某个日期\r\n- [x] lessThanDate(date1, date2)  小于某个日期\r\n\r\n验证方法不够？ `.addMethod(name, method)` 添加自定义验证方法（与表单验证自定义方法类似）\r\n\r\n\r\n## 备注\r\n\r\nvalidator.js 只包含验证实现，不包括 UI，因此 UI 部分可以自由发挥<br />\r\n因注重结构和逻辑分离，validator.js 暂不考虑将验证表达式加入 html 结构中，以保持良好的可维护性<br />\r\nvalidator.js 不依赖 jQuery 及其他类库，可结合 jQuery 及其他类库使用\r\n\r\n\r\n## 规范\r\n\r\nvalidator.js 采用 `eslint` 来保持代码的正确性和可读性，详情见 `.eslintrc` 文件\r\n\r\n## LICENSE\r\n\r\nMIT\r\n\r\n## 参考\r\n\r\nhttps://github.com/jaywcjlove/validator.js\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}